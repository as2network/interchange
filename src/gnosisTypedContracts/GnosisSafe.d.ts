/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from ".";

interface GnosisSafeInterface extends Interface {
  functions: {
    getMessageHash: TypedFunctionDescription<{
      encode([message]: [Arrayish]): string;
    }>;

    addOwnerWithThreshold: TypedFunctionDescription<{
      encode([owner, _threshold]: [string, BigNumberish]): string;
    }>;

    isValidSignature: TypedFunctionDescription<{
      encode([_data, _signature]: [Arrayish, Arrayish]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    execTransactionFromModule: TypedFunctionDescription<{
      encode([to, value, data, operation]: [string, BigNumberish, Arrayish, BigNumberish]): string;
    }>;

    execTransactionFromModuleReturnData: TypedFunctionDescription<{
      encode([to, value, data, operation]: [string, BigNumberish, Arrayish, BigNumberish]): string;
    }>;

    signedMessages: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    enableModule: TypedFunctionDescription<{
      encode([module]: [string]): string;
    }>;

    changeThreshold: TypedFunctionDescription<{
      encode([_threshold]: [BigNumberish]): string;
    }>;

    execTransaction: TypedFunctionDescription<{
      encode([
        to,
        value,
        data,
        operation,
        safeTxGas,
        baseGas,
        gasPrice,
        gasToken,
        refundReceiver,
        signatures,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string,
        Arrayish
      ]): string;
    }>;

    approvedHashes: TypedFunctionDescription<{
      encode([,]: [string, Arrayish]): string;
    }>;

    changeMasterCopy: TypedFunctionDescription<{
      encode([_masterCopy]: [string]): string;
    }>;

    signMessage: TypedFunctionDescription<{
      encode([_data]: [Arrayish]): string;
    }>;

    getOwners: TypedFunctionDescription<{ encode([]: []): string }>;

    NAME: TypedFunctionDescription<{ encode([]: []): string }>;

    nonce: TypedFunctionDescription<{ encode([]: []): string }>;

    getModules: TypedFunctionDescription<{ encode([]: []): string }>;

    setup: TypedFunctionDescription<{
      encode([
        _owners,
        _threshold,
        to,
        data,
        fallbackHandler,
        paymentToken,
        payment,
        paymentReceiver,
      ]: [string[], BigNumberish, string, Arrayish, string, string, BigNumberish, string]): string;
    }>;

    requiredTxGas: TypedFunctionDescription<{
      encode([to, value, data, operation]: [string, BigNumberish, Arrayish, BigNumberish]): string;
    }>;

    getModulesPaginated: TypedFunctionDescription<{
      encode([start, pageSize]: [string, BigNumberish]): string;
    }>;

    approveHash: TypedFunctionDescription<{
      encode([hashToApprove]: [Arrayish]): string;
    }>;

    getTransactionHash: TypedFunctionDescription<{
      encode([
        to,
        value,
        data,
        operation,
        safeTxGas,
        baseGas,
        gasPrice,
        gasToken,
        refundReceiver,
        _nonce,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    disableModule: TypedFunctionDescription<{
      encode([prevModule, module]: [string, string]): string;
    }>;

    swapOwner: TypedFunctionDescription<{
      encode([prevOwner, oldOwner, newOwner]: [string, string, string]): string;
    }>;

    getThreshold: TypedFunctionDescription<{ encode([]: []): string }>;

    encodeTransactionData: TypedFunctionDescription<{
      encode([
        to,
        value,
        data,
        operation,
        safeTxGas,
        baseGas,
        gasPrice,
        gasToken,
        refundReceiver,
        _nonce,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    setFallbackHandler: TypedFunctionDescription<{
      encode([handler]: [string]): string;
    }>;

    domainSeparator: TypedFunctionDescription<{ encode([]: []): string }>;

    removeOwner: TypedFunctionDescription<{
      encode([prevOwner, owner, _threshold]: [string, string, BigNumberish]): string;
    }>;

    VERSION: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ApproveHash: TypedEventDescription<{
      encodeTopics([approvedHash, owner]: [Arrayish | null, string | null]): string[];
    }>;

    SignMsg: TypedEventDescription<{
      encodeTopics([msgHash]: [Arrayish | null]): string[];
    }>;

    ExecutionFailure: TypedEventDescription<{
      encodeTopics([txHash, payment]: [null, null]): string[];
    }>;

    ExecutionSuccess: TypedEventDescription<{
      encodeTopics([txHash, payment]: [null, null]): string[];
    }>;

    AddedOwner: TypedEventDescription<{
      encodeTopics([owner]: [null]): string[];
    }>;

    RemovedOwner: TypedEventDescription<{
      encodeTopics([owner]: [null]): string[];
    }>;

    ChangedThreshold: TypedEventDescription<{
      encodeTopics([threshold]: [null]): string[];
    }>;

    EnabledModule: TypedEventDescription<{
      encodeTopics([module]: [null]): string[];
    }>;

    DisabledModule: TypedEventDescription<{
      encodeTopics([module]: [null]): string[];
    }>;

    ExecutionFromModuleSuccess: TypedEventDescription<{
      encodeTopics([module]: [string | null]): string[];
    }>;

    ExecutionFromModuleFailure: TypedEventDescription<{
      encodeTopics([module]: [string | null]): string[];
    }>;

    ChangedMasterCopy: TypedEventDescription<{
      encodeTopics([masterCopy]: [null]): string[];
    }>;
  };
}

export class GnosisSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GnosisSafe;
  attach(addressOrName: string): GnosisSafe;
  deployed(): Promise<GnosisSafe>;

  on(event: EventFilter | string, listener: Listener): GnosisSafe;
  once(event: EventFilter | string, listener: Listener): GnosisSafe;
  addListener(eventName: EventFilter | string, listener: Listener): GnosisSafe;
  removeAllListeners(eventName: EventFilter | string): GnosisSafe;
  removeListener(eventName: as2, listener: Listener): GnosisSafe;

  interface: GnosisSafeInterface;

  functions: {
    getMessageHash(message: Arrayish): Promise<string>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isValidSignature(
      _data: Arrayish,
      _signature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isOwner(owner: string): Promise<boolean>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    signedMessages(arg0: Arrayish): Promise<BigNumber>;

    enableModule(module: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approvedHashes(arg0: string, arg1: Arrayish): Promise<BigNumber>;

    changeMasterCopy(
      _masterCopy: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    signMessage(_data: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    getOwners(): Promise<string[]>;

    NAME(): Promise<string>;

    nonce(): Promise<BigNumber>;

    getModules(): Promise<string[]>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: Arrayish,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    approveHash(
      hashToApprove: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish
    ): Promise<string>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getThreshold(): Promise<BigNumber>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish
    ): Promise<string>;

    setFallbackHandler(
      handler: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    domainSeparator(): Promise<string>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    VERSION(): Promise<string>;
  };

  getMessageHash(message: Arrayish): Promise<string>;

  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isValidSignature(
    _data: Arrayish,
    _signature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isOwner(owner: string): Promise<boolean>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  signedMessages(arg0: Arrayish): Promise<BigNumber>;

  enableModule(module: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  changeThreshold(
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  execTransaction(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approvedHashes(arg0: string, arg1: Arrayish): Promise<BigNumber>;

  changeMasterCopy(
    _masterCopy: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  signMessage(_data: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getOwners(): Promise<string[]>;

  NAME(): Promise<string>;

  nonce(): Promise<BigNumber>;

  getModules(): Promise<string[]>;

  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: Arrayish,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  approveHash(
    hashToApprove: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish
  ): Promise<string>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getThreshold(): Promise<BigNumber>;

  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish
  ): Promise<string>;

  setFallbackHandler(
    handler: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  domainSeparator(): Promise<string>;

  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  VERSION(): Promise<string>;

  filters: {
    ApproveHash(approvedHash: Arrayish | null, owner: string | null): EventFilter;

    SignMsg(msgHash: Arrayish | null): EventFilter;

    ExecutionFailure(txHash: null, payment: null): EventFilter;

    ExecutionSuccess(txHash: null, payment: null): EventFilter;

    AddedOwner(owner: null): EventFilter;

    RemovedOwner(owner: null): EventFilter;

    ChangedThreshold(threshold: null): EventFilter;

    EnabledModule(module: null): EventFilter;

    DisabledModule(module: null): EventFilter;

    ExecutionFromModuleSuccess(module: string | null): EventFilter;

    ExecutionFromModuleFailure(module: string | null): EventFilter;

    ChangedMasterCopy(masterCopy: null): EventFilter;
  };

  estimate: {
    getMessageHash(message: Arrayish): Promise<BigNumber>;

    addOwnerWithThreshold(owner: string, _threshold: BigNumberish): Promise<BigNumber>;

    isValidSignature(_data: Arrayish, _signature: Arrayish): Promise<BigNumber>;

    isOwner(owner: string): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish
    ): Promise<BigNumber>;

    signedMessages(arg0: Arrayish): Promise<BigNumber>;

    enableModule(module: string): Promise<BigNumber>;

    changeThreshold(_threshold: BigNumberish): Promise<BigNumber>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: Arrayish
    ): Promise<BigNumber>;

    approvedHashes(arg0: string, arg1: Arrayish): Promise<BigNumber>;

    changeMasterCopy(_masterCopy: string): Promise<BigNumber>;

    signMessage(_data: Arrayish): Promise<BigNumber>;

    getOwners(): Promise<BigNumber>;

    NAME(): Promise<BigNumber>;

    nonce(): Promise<BigNumber>;

    getModules(): Promise<BigNumber>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: Arrayish,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string
    ): Promise<BigNumber>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish
    ): Promise<BigNumber>;

    getModulesPaginated(start: string, pageSize: BigNumberish): Promise<BigNumber>;

    approveHash(hashToApprove: Arrayish): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish
    ): Promise<BigNumber>;

    disableModule(prevModule: string, module: string): Promise<BigNumber>;

    swapOwner(prevOwner: string, oldOwner: string, newOwner: string): Promise<BigNumber>;

    getThreshold(): Promise<BigNumber>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish
    ): Promise<BigNumber>;

    setFallbackHandler(handler: string): Promise<BigNumber>;

    domainSeparator(): Promise<BigNumber>;

    removeOwner(prevOwner: string, owner: string, _threshold: BigNumberish): Promise<BigNumber>;

    VERSION(): Promise<BigNumber>;
  };
}
