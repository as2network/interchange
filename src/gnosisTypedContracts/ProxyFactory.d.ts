/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from ".";

interface ProxyFactoryInterface extends Interface {
  functions: {
    createProxyWithNonce: TypedFunctionDescription<{
      encode([_mastercopy, initializer, saltNonce]: [string, Arrayish, BigNumberish]): string;
    }>;

    calculateCreateProxyWithNonceAddress: TypedFunctionDescription<{
      encode([_mastercopy, initializer, saltNonce]: [string, Arrayish, BigNumberish]): string;
    }>;

    proxyCreationCode: TypedFunctionDescription<{ encode([]: []): string }>;

    createProxy: TypedFunctionDescription<{
      encode([masterCopy, data]: [string, Arrayish]): string;
    }>;

    proxyRuntimeCode: TypedFunctionDescription<{ encode([]: []): string }>;

    createProxyWithCallback: TypedFunctionDescription<{
      encode([_mastercopy, initializer, saltNonce, callback]: [
        string,
        Arrayish,
        BigNumberish,
        string
      ]): string;
    }>;
  };

  events: {
    ProxyCreation: TypedEventDescription<{
      encodeTopics([proxy]: [null]): string[];
    }>;
  };
}

export class ProxyFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ProxyFactory;
  attach(addressOrName: string): ProxyFactory;
  deployed(): Promise<ProxyFactory>;

  on(event: EventFilter | string, listener: Listener): ProxyFactory;
  once(event: EventFilter | string, listener: Listener): ProxyFactory;
  addListener(eventName: EventFilter | string, listener: Listener): ProxyFactory;
  removeAllListeners(eventName: EventFilter | string): ProxyFactory;
  removeListener(eventName: as2, listener: Listener): ProxyFactory;

  interface: ProxyFactoryInterface;

  functions: {
    createProxyWithNonce(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    proxyCreationCode(): Promise<string>;

    createProxy(
      masterCopy: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    proxyRuntimeCode(): Promise<string>;

    createProxyWithCallback(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish,
      callback: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  createProxyWithNonce(
    _mastercopy: string,
    initializer: Arrayish,
    saltNonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  calculateCreateProxyWithNonceAddress(
    _mastercopy: string,
    initializer: Arrayish,
    saltNonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  proxyCreationCode(): Promise<string>;

  createProxy(
    masterCopy: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  proxyRuntimeCode(): Promise<string>;

  createProxyWithCallback(
    _mastercopy: string,
    initializer: Arrayish,
    saltNonce: BigNumberish,
    callback: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ProxyCreation(proxy: null): EventFilter;
  };

  estimate: {
    createProxyWithNonce(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish
    ): Promise<BigNumber>;

    calculateCreateProxyWithNonceAddress(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish
    ): Promise<BigNumber>;

    proxyCreationCode(): Promise<BigNumber>;

    createProxy(masterCopy: string, data: Arrayish): Promise<BigNumber>;

    proxyRuntimeCode(): Promise<BigNumber>;

    createProxyWithCallback(
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish,
      callback: string
    ): Promise<BigNumber>;
  };
}
