import "mocha";
import * as chai from "chai";

import { solidity, loadFixture } from "ethereum-waffle";
import { BigNumber, defaultAbiCoder } from "ethers/utils";
import { when, as2thing, spy } from "ts-mockito";
import { Provider } from "ethers/providers";
import { Wallet } from "ethers/wallet";
import { RelayHubFactory, MultiNonceReplayProtection, deployMetaTxContracts } from "../../src";

const expect = chai.expect;
chai.use(solidity);

async function createRelayHub(provider: Provider, [admin]: Wallet[]) {
  const { relayHubAddress } = await deployMetaTxContracts(admin);
  const relayHub = new RelayHubFactory(admin).attach(relayHubAddress);
  return {
    relayHub,
    admin,
  };
}

describe("Multinonce Module", () => {
  it("Replace-by-nonce (single queue) increments as expected", async () => {
    const { relayHub, admin } = await loadFixture(createRelayHub);

    const multinonce = new MultiNonceReplayProtection(1, admin, relayHub.address);

    const encodedReplayProtection = await multinonce.getEncodedReplayProtection();

    const decodedReplayProtection = defaultAbiCoder.decode(
      ["uint", "uint"],
      encodedReplayProtection
    );

    expect(decodedReplayProtection[0].toString()).to.eq(new BigNumber("0"));
    expect(decodedReplayProtection[1].toString()).to.eq(new BigNumber("0"));
  }).timeout(50000);

  it("Single queue nonce increments sequentially as expected", async () => {
    const { relayHub, admin } = await loadFixture(createRelayHub);

    const multinonce = new MultiNonceReplayProtection(1, admin, relayHub.address);

    for (let i = 0; i < 25; i++) {
      const encodedReplayProtection = await multinonce.getEncodedReplayProtection();
      const decodedReplayProtection = defaultAbiCoder.decode(
        ["uint", "uint"],
        encodedReplayProtection
      );

      expect(decodedReplayProtection[0].toString()).to.eq(new BigNumber("0"));
      expect(decodedReplayProtection[1].toString()).to.eq(new BigNumber(i));
    }
  }).timeout(50000);

  it("Multiple queues and each queue nonce increments sequentially as expected", async () => {
    const { relayHub, admin } = await loadFixture(createRelayHub);

    const NO_OF_QUEUES = 5;
    const multinonce = new MultiNonceReplayProtection(NO_OF_QUEUES, admin, relayHub.address);

    // We'll have 10 queue (concurrent transactions)
    // Under the hood, it authorises a transaction for each queue in turn.

    for (let i = 0; i < 25; i++) {
      for (let j = 0; j < NO_OF_QUEUES; j++) {
        const encodedReplayProtection = await multinonce.getEncodedReplayProtection();
        const decodedReplayProtection = defaultAbiCoder.decode(
          ["uint", "uint"],
          encodedReplayProtection
        );

        // We cycle through each queue
        expect(decodedReplayProtection[0].toString()).to.eq(new BigNumber(j)); // Queue
        expect(decodedReplayProtection[1].toString()).to.eq(new BigNumber(i)); // Index in Queue
      }
    }
  }).timeout(50000);

  it("Replay protection reads from contract for starting nonce.", async () => {
    const { relayHub, admin } = await loadFixture(createRelayHub);
    const NO_OF_QUEUES = 5;

    const multinonce = new MultiNonceReplayProtection(NO_OF_QUEUES, admin, relayHub.address);
    const spiedMultinonce: MultiNonceReplayProtection = spy(multinonce);

    when(
      //@ts-ignore
      await spiedMultinonce.accessNonceStore(as2thing())
    ).thenReturn(new BigNumber("2"));

    // MultiNonce should pick up the expected index on-chain
    for (let i = 2; i < 5; i++) {
      for (let j = 0; j < NO_OF_QUEUES; j++) {
        const encodedReplayProtection = await multinonce.getEncodedReplayProtection();
        const decodedReplayProtection = defaultAbiCoder.decode(
          ["uint", "uint"],
          encodedReplayProtection
        );

        // We cycle through each queue
        expect(decodedReplayProtection[0].toString()).to.eq(new BigNumber(j)); // Queue
        expect(decodedReplayProtection[1].toString()).to.eq(new BigNumber(i)); // Index in Queue
      }
    }
  }).timeout(50000);

  it("Send concurrent requests and the lock should ensure nonce incremented as expected", async () => {
    const { relayHub, admin } = await loadFixture(createRelayHub);
    const NO_OF_QUEUES = 100;
    const multinonce = new MultiNonceReplayProtection(NO_OF_QUEUES, admin, relayHub.address);
    const spiedMultinonce: MultiNonceReplayProtection = spy(multinonce);

    when(
      // @ts-ignore
      await spiedMultinonce.accessNonceStore(as2thing())
    ).thenReturn(new BigNumber("2"));

    const concurrentJobs = [];

    for (let i = 0; i < NO_OF_QUEUES; i++) {
      const job = multinonce.getEncodedReplayProtection();
      concurrentJobs.push(job);
    }

    const encodedReplayProtection = await Promise.all(concurrentJobs);

    encodedReplayProtection.sort();
    const results = [
      "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000230000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000250000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000270000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000290000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000002f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000310000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000330000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000350000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000370000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000390000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000430000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000470000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000490000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000004f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000510000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000530000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000550000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000570000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000590000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005b0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005d0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002",
      "0x000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000002",
      "0x00000000000000000000000000000000000000000000000000000000000000630000000000000000000000000000000000000000000000000000000000000002",
    ];

    for (let i = 0; i < encodedReplayProtection.length; i++) {
      expect(encodedReplayProtection[i]).to.eq(results[i]);
    }
    // expect(encodedReplayProtection).to.eq(results);
  }).timeout(50000);
});
